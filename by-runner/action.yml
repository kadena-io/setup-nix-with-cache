name: 'Set up Nix environment with cache uploads by the runner'
description: -|
  This action installs Nix in multi-user mode and configures it to
  use a custom cache. It also uploads all the build results to the cache,
  including intermediate packages built as part of a build activity.
  The cache uploads are performed by the runner user in the post-build-hook,
  this means that the runner user needs to have the proper credentials
  configured to have write access to the cache.
inputs:
  cache_url:
    description: 'URL for the Nix cache'
    required: true
  signing_private_key:
    description: The private (secret) key used for signing Nix store paths
    required: true
runs:
  using: composite
  steps:
    - name: Install Nix
      uses: cachix/install-nix-action@v22

    - name: Set NIX_PATH
      run: |
        echo "NIX_PATH=nixpkgs=https://github.com/NixOS/nixpkgs/archive/23.05.tar.gz" >> $GITHUB_ENV
      shell: bash

    - run: |
        echo $PATH
        nix-build --version
      shell: bash

    - name: Populate the nix.conf with cache fields
      shell: bash
      run: |
        TMP_DIR=$(mktemp -d)
        echo "${{ inputs.signing_private_key }}" > "$TMP_DIR/key.private"

        tee $TMP_DIR/upload-paths.sh <<EOF
        #!/usr/bin/env bash
        read -r OUT_PATHS
        export IFS=' '
        echo Uploading paths \$OUT_PATHS
        nix copy --to "${{ inputs.cache_url }}" \$OUT_PATHS 2>&1
        EOF
        chmod a+x $TMP_DIR/upload-paths.sh

        NMAP=$(nix-build '<nixpkgs>' -A nmap --no-out-link)
        $NMAP/bin/ncat -k -l 54321 -e $TMP_DIR/upload-paths.sh &

        sleep 1
        echo $NMAP | nc localhost 54321

        tee $TMP_DIR/post-build-hook.sh <<EOF
        #!/usr/bin/env bash

        set -euo pipefail
        set -f # disable globbing
        echo "Built paths:" \$OUT_PATHS
        echo \$OUT_PATHS | nc localhost 54321
        EOF
        chmod a+x $TMP_DIR/post-build-hook.sh

        CERTFILEOPT=$( [[ "$OSTYPE" =~ darwin ]] && echo "ssl-cert-file = /etc/ssl/cert.pem" || echo "" )

        sudo mkdir -p /etc/nix/
        sudo tee /etc/nix/nix.conf <<EOF
        show-trace = true
        max-jobs = auto
        $CERTFILEOPT
        trusted-users = root ${USER:-}
        substituters = ${{ inputs.cache_url }} https://cache.nixos.org/
        trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
        secret-key-files = $TMP_DIR/key.private
        post-build-hook = $TMP_DIR/post-build-hook.sh
        experimental-features = nix-command fetch-closure flakes
        EOF

    - name: Restart the Nix daemon on MacOS
      shell: bash
      if: ${{ runner.os == 'macOS' }}
      run: |
        sudo launchctl stop org.nixos.nix-daemon;
        sudo launchctl start org.nixos.nix-daemon;

    - name: Restart the Nix daemon on Linux
      shell: bash
      if: ${{ runner.os == 'Linux' }}
      run: |
        sudo systemctl restart nix-daemon.service
